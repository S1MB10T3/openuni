
global
  maxconn 60000
  tune.ssl.default-dh-param 2048
  log /dev/log local0 info
  stats socket /var/run/haproxy.sock mode 660 level admin

defaults
  mode http
  balance roundrobin
  option redispatch
  option forwardfor

  timeout connect 5s
  timeout client  30s
  timeout server  30s
  timeout tunnel  1h
  timeout check   500ms
  timeout client-fin 30s
  timeout server-fin 30s

frontend http-in
  bind *:80
  reqadd X-Forwarded-Proto:\ http
  default_backend Not-Websocket-Cached
  redirect scheme https code 301 if !{ ssl_fc }  
  maxconn 60000

frontend https-in
  #https://www.digitalocean.com/community/tutorials/how-to-secure-haproxy-with-let-s-encrypt-on-ubuntu-14-04
  #DOMAIN='api.overrustle.com' sudo -E bash -c 'cat /etc/letsencrypt/live/$DOMAIN/fullchain.pem /etc/letsencrypt/live/$DOMAIN/privkey.pem > /etc/haproxy/certs/$DOMAIN.pem'
  #ADD --standalone-supported-challenges http-01 to certbot https://certbot.eff.org/#debianjessie-haproxy

  bind *:443 ssl crt /etc/haproxy/certs/ws.overrustle.com.pem
  reqadd X-Forwarded-Proto:\ https  
  default_backend Not-Websocket-Cached
  maxconn 60000

  # Any URL doing websockets  will be flagged as 'is_websocket'
  acl is_websocket2 hdr(host) -i ws.overrustle.com
  acl is_websocket2 hdr(Upgrade) -i WebSocket
  acl is_websocket2 hdr_beg(Host) -i wss

  # API requests
  acl is_api hdr(host) -i api.overrustle.com

  # The connection to use if 'is_websocket2' is flagged
  use_backend Websocket if is_websocket2

  # Use API directly
  use_backend Not-Websocket-Direct if is_api

  # handle redirects
  redirect location http://127.0.0.1:420 code 301 if { path_beg /socket.io } #keep legacy clients from spamming up resources
  redirect location https://blacked.com code 301 if { hdr_dir(Referer) -m dom t.co } #twitter to blacked
  redirect location https://blacked.com code 301 if { hdr_dir(Referer) -m dom reddit.com } #reddit to blacked
  redirect location https://blacked.com code 301 if { hdr_dir(Referer) -m dom facebook.com } #facebook to blacked 

  # handle CORS here
  rspadd Access-Control-Allow-Origin:\ "https://overrustle.com"
  rspadd Access-Control-Allow-Credentials:\ true
  rspadd Access-Control-Allow-Methods:\ "POST, GET, OPTIONS"
  rspadd Access-Control-Allow-Headers:\ "Content-Type"

  # abusive call handling 
#  stick-table type ip size 1m expire 10s store gpc0,http_req_rate(10s) #block for 5 minutes
#  tcp-request connection track-sc1 src
#  tcp-request content reject if { src_get_gpc0 gt 0 }
#  http-request deny if { src_get_gpc0 gt 0 }

  errorfile 503 /etc/haproxy/errors/503.http

listen stats
  bind :6969 ssl crt /etc/haproxy/certs/ws.overrustle.com.pem
  mode http
  stats enable
  stats hide-version
  stats realm Haproxy\ Statistics
  stats uri /
  stats auth xxxxxxxxxxxx:xxxxxxxxxxx

backend Not-Websocket-Cached
  maxconn 60000
  option httpchk HEAD /

  #allow them to load it 10 times, add to flag_abuser, send em a 403
#  acl abuse src_http_req_rate(https-in) ge 20 
#  acl flag_abuser src_inc_gpc0(https-in) ge 0
#  http-request deny if abuse flag_abuser

  server varnish localhost:8000 weight 1 maxconn 60000 check
  server nodesvc localhost:9000 weight 1 maxconn 1200 check backup

backend Not-Websocket-Direct
  maxconn 512
  option httpchk HEAD /

  server nodesvc localhost:9000 weight 1 maxconn 512 check

backend Websocket
  maxconn 60000
  balance source
  option http-server-close
  option forceclose

  server nodesvc localhost:9000 weight 1 maxconn 60000 check
